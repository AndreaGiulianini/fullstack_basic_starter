{
  "info": {
    "_postman_id": "894dbd5b-95ff-472d-9cb5-8f05d4d8c734",
    "name": "Fullstack Starter API - Better Auth",
    "description": "Comprehensive API testing collection for the Fullstack Starter project with Better-Auth integration",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "6610193"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "testPassword",
      "value": "TestPass123!",
      "type": "string"
    },
    {
      "key": "testName",
      "value": "Test User",
      "type": "string"
    },
    {
      "key": "testEmail2",
      "value": "test2@example.com",
      "type": "string"
    },
    {
      "key": "betterAuthToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "createdUserId",
      "value": "",
      "type": "string"
    },
    {
      "key": "uniqueEmail",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Ping - Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success property\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response has pong message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('pong');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/healthcheck/ping",
              "host": ["{{baseUrl}}"],
              "path": ["api", "healthcheck", "ping"]
            },
            "description": "Health check endpoint to verify API is running"
          },
          "response": []
        }
      ],
      "description": "Health check and status endpoints"
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Sign Up with Email",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique email for testing",
                  "const timestamp = Date.now();",
                  "const uniqueEmail = `test.${timestamp}@example.com`;",
                  "pm.environment.set('uniqueEmail', uniqueEmail);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    // User ID should be text-based (not UUID)",
                  "    pm.expect(jsonData.user.id).to.be.a('string');",
                  "    pm.expect(jsonData.user.id.length).to.be.greaterThan(10);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "});",
                  "",
                  "// Store token and user ID for other tests",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('betterAuthToken', jsonData.token);",
                  "    pm.environment.set('userId', jsonData.user.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"{{testPassword}}\",\n  \"name\": \"{{testName}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/sign-up/email",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "sign-up", "email"]
            },
            "description": "Sign up a new user with email and password using better-auth"
          },
          "response": []
        },
        {
          "name": "Sign In with Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    // User ID should be text-based (not UUID)",
                  "    pm.expect(jsonData.user.id).to.be.a('string');",
                  "    pm.expect(jsonData.user.id.length).to.be.greaterThan(10);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "});",
                  "",
                  "// Store token and user ID for protected route tests",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('betterAuthToken', jsonData.token);",
                  "    pm.environment.set('userId', jsonData.user.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/sign-in/email",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "sign-in", "email"]
            },
            "description": "Sign in with email and password using better-auth"
          },
          "response": []
        },
        {
          "name": "Sign Out",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Clear stored tokens after sign out",
                  "if (pm.response.code === 200) {",
                  "    pm.environment.set('betterAuthToken', '');",
                  "    pm.environment.set('userId', '');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{betterAuthToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/sign-out",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "sign-out"]
            },
            "description": "Sign out and invalidate current session using better-auth"
          },
          "response": []
        },
        {
          "name": "Sign In - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"wrongpassword\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/sign-in/email",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "sign-in", "email"]
            },
            "description": "Test sign in with invalid credentials"
          },
          "response": []
        }
      ],
      "description": "Better-Auth endpoints for modern authentication flows"
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Create User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique email for user creation",
                  "const timestamp = Date.now();",
                  "const uniqueEmail = `user.${timestamp}@example.com`;",
                  "pm.environment.set('uniqueEmail', uniqueEmail);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success property\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('email');",
                  "    pm.expect(jsonData.data).to.have.property('name');",
                  "    // User ID should be text-based (not UUID)",
                  "    pm.expect(jsonData.data.id).to.be.a('string');",
                  "    pm.expect(jsonData.data.id.length).to.be.greaterThan(10);",
                  "});",
                  "",
                  "pm.test(\"Password is not returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.not.have.property('password');",
                  "});",
                  "",
                  "// Store user ID for other tests",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('createdUserId', jsonData.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{testName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            },
            "description": "Create a new user with valid data (uses better-auth internally)"
          },
          "response": []
        },
        {
          "name": "Create User - Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has validation error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('statusCode');",
                  "    pm.expect(jsonData.statusCode).to.equal(400);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{testName}}\",\n  \"email\": \"invalid-email\",\n  \"password\": \"{{testPassword}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            },
            "description": "Test user creation with invalid email format"
          },
          "response": []
        },
        {
          "name": "Get User by ID - Authenticated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success property\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('email');",
                  "    pm.expect(jsonData.data).to.have.property('name');",
                  "    pm.expect(jsonData.data).to.have.property('createdAt');",
                  "});",
                  "",
                  "pm.test(\"Password is not returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.not.have.property('password');",
                  "});",
                  "",
                  "pm.test(\"createdAt is ISO string\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const date = new Date(jsonData.data.createdAt);",
                  "    pm.expect(date.toISOString()).to.equal(jsonData.data.createdAt);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{betterAuthToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            },
            "description": "Get user details by ID (requires authentication)"
          },
          "response": []
        },
        {
          "name": "Get User by ID - Unauthenticated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response indicates authentication required\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            },
            "description": "Test user endpoint without authentication"
          },
          "response": []
        }
      ],
      "description": "User management endpoints"
    },
    {
      "name": "Testing",
      "item": [
        {
          "name": "Identity Count - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success property\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response returns the amount\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('amount');",
                  "    pm.expect(jsonData.amount).to.equal(42);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 42\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/identity-count",
              "host": ["{{baseUrl}}"],
              "path": ["api", "identity-count"]
            },
            "description": "Test identity count endpoint with valid amount"
          },
          "response": []
        },
        {
          "name": "Identity Count - Invalid Input",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has validation error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('statusCode');",
                  "    pm.expect(jsonData.statusCode).to.equal(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": \"invalid\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/identity-count",
              "host": ["{{baseUrl}}"],
              "path": ["api", "identity-count"]
            },
            "description": "Test identity count endpoint with invalid input type"
          },
          "response": []
        }
      ],
      "description": "Testing and utility endpoints for development"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": ["// Global pre-request script", "console.log('Running request to:', pm.request.url.toString());"]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has proper content type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}
