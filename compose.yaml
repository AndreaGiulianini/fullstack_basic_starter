services:
  traefik:
    image: 'traefik:3.3'
    container_name: traefik
    command:
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - './letsencrypt:/letsencrypt'
    depends_on:
      - app
      - api

  app:
    build:
      context: ./app
      target: 'image-${ENV}'
      args:
        NEXT_PUBLIC_ENVIRONMENT: '${ENV}'
    image: app
    container_name: app
    labels:
      - traefik.enable=true
      - traefik.http.routers.app.rule=PathPrefix(`/`)
      - traefik.http.services.app.loadbalancer.server.port=3000
    environment:
      TZ: Europe/Rome
      NEXT_PUBLIC_ENVIRONMENT: '${ENV}'
    restart: always

  api:
    build:
      context: ./api
    image: api
    container_name: api
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=PathPrefix(`/api`)
      - traefik.http.routers.swagger-ui.rule=PathPrefix(`/swagger-ui`)
      - traefik.http.services.api.loadbalancer.server.port=5000
    environment:
      ENV: '${ENV}'
      DB_HOST: '${DB_HOST}'
      DB_USER: '${DB_USER}'
      DB_PASS: '${DB_PASS}'
      DB_NAME: '${DB_NAME}'
      DB_PORT: '${DB_PORT}'
      VALKEY_HOST: '${VALKEY_HOST}'
      VALKEY_PASS: '${VALKEY_PASS}'
      VALKEY_PORT: '${VALKEY_PORT}'
      ELASTICSEARCH_HOST: '${ELASTICSEARCH_HOST}'
      ELASTICSEARCH_PORT: '${ELASTICSEARCH_PORT}'
    restart: always
